user {{NGINX_UID}};
worker_processes auto;

pid /run/nginx.pid;

include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
    # multi_accept on;
}

http {

    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;

    # server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # SSL Settings
    ##

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    ##
    # Logging Settings
    ##

    log_format logfmt   'request_uri="$request_uri" '
                        'request_method="$request_method" '
                        'status="$status" '
                        'remote_addr="$remote_addr" '
                        'http_referer="$http_referer" '
                        'http_user_agent="$http_user_agent" '
                        'server_protocol="$server_protocol" '
                        'ssl_client_verify="$ssl_client_verify" '
                        'request_length="$request_length" '
                        'bytes_sent="$bytes_sent" '
                        'cookie_AccessToken="$cookie_AccessToken" '
                        'cookie_ClientId="$cookie_ClientId" '
                        'cookie_AccessExpires="$cookie_AccessExpires" ';

    access_log /dev/stdout;
    error_log /dev/stderr info;

    {{#ACCESS_LOG_FILE}}
        access_log /nginx.log logfmt;
    {{/ACCESS_LOG_FILE}}

    ##
    # Gzip Settings
    ##

    gzip on;

    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    ##
    # Virtual Host Configs
    ##

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    geo $whitelist_ip {
        default         no;
        
        {{#WHITELIST_LOCAL_IP}}
            10.0.0.0/8      yes;
            172.16.0.0/12   yes;
            192.168.0.0/16  yes;
        {{/WHITELIST_LOCAL_IP}}

        {{#WHITELIST_IP_ARRAY}}
            {{.}}           yes;
        {{/WHITELIST_IP_ARRAY}}
    }

    map $whitelist_ip$ssl_client_verify $access_allowed {
        "~*^yes"        yes;
        "noSUCCESS"     yes;
        default         no;
    }

    server {
        server_name     _;
        listen          80;
        listen          [::]:80;

        {{#ENABLE_HTTPS}}
            listen          443 ssl;
            listen          [::]:443 ssl;

            # Redirect
            if ($whitelist_ip = no) {
                set $test A;
            }
            if ($scheme = http) {
                set $test  "${test}B"; 
            }
            if ($test = AB) { 
                return 301 https://$host{{HTTPS_REDIRECT_PORT}}$request_uri;
                break; 
            }

            # SSL certificates
            ssl_certificate         /ssl/nginx.crt;
            ssl_certificate_key     /ssl/nginx.key;

            {{#SSL_CLIENT_AUTH}}
                # SSL client-authentification
                ssl_client_certificate  /ssl/client.crt;
                {{#SSL_CLIENT_AUTH_CRL}}
                    ssl_crl             /ssl/client.crl;
                {{/SSL_CLIENT_AUTH_CRL}}
                ssl_verify_client       optional;
            {{/SSL_CLIENT_AUTH}}
        {{/ENABLE_HTTPS}}

        location / {
            root   /www;
            index  index.html index.htm;

            {{#SSL_CLIENT_AUTH}}
                if ($access_allowed = no) {
                    return 403;
                }
            {{/SSL_CLIENT_AUTH}}
        }

        {{#WS_PROXY}}
            location {{WS_PROXY_PATH}} {
                proxy_pass          http://{{WS_PROXY}};
                proxy_http_version  1.1;
                proxy_set_header    Upgrade        $http_upgrade;
                proxy_set_header    Connection     $connection_upgrade;

                {{#SSL_CLIENT_AUTH}}
                    if ($access_allowed = no) {
                        return 403;
                    }
                {{/SSL_CLIENT_AUTH}}
            }
        {{/WS_PROXY}}
    }
}
